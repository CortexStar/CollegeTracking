import React, { useState, useEffect, useRef } from 'react';
import { Semester, Course } from '@/utils/parseCourseData'; // Adjust path as needed
import { Input } from '@/components/ui/input'; // Assuming shadcn/ui Input
import { Button } from '@/components/ui/button';
import { Trash2, Edit3, PlusCircle, ChevronDown, ChevronRight } from 'lucide-react'; // Example icons

// Define the props for SemesterDropdown
interface SemesterDropdownProps {
  semester: Semester;
  index: number; // Index for drag and drop or other list operations
  editing: {
    semesterId: string;
    courseIndex: number;
    field: "id" | "title" | "grade" | "credits";
    value: string;
  } | null;
  editingSemesterId: string | null;
  editedSemesterName: string;
  onStartEditingSemesterName: (id: string, currentName: string) => void;
  onSaveEditedSemesterName: (newName?: string) => void; // Allow saving with Enter
  // Make sure setEditedSemesterName is passed if it's used directly for typing in semester name
  // For this example, I'll assume editedSemesterName is updated via a prop if needed,
  // or handle it internally in GradesPage. For course editing, we use 'editing.value'.
  // Let's add setEditedSemesterName for completeness if semester name editing is also inline.
   setEditedSemesterName?: (name: string) => void;


  onStartEditingCourse: (semesterId: string, courseIndex: number, field: "id" | "title" | "grade" | "credits", currentValue: string) => void;
  onSaveEditedCourse: (override?: string) => void; // Allow saving with Enter
  onRemoveSemester: (id: string) => void;
  onAddCourse: (semesterId: string) => void;
  onRemoveCourse: (semesterId: string, courseIndex: number) => void;
  // Prop to handle changes in the input field for the currently editing course
  setEditingCourseValue?: (value: string) => void; // This would be linked to editing.value in GradesPage
}

/**
 * SemesterDropdown component
 * Displays a single semester and its courses, with inline editing capabilities.
 */
const SemesterDropdown: React.FC<SemesterDropdownProps> = ({
  semester,
  index,
  editing,
  editingSemesterId,
  editedSemesterName,
  onStartEditingSemesterName,
  onSaveEditedSemesterName,
  setEditedSemesterName, // For semester name editing
  onStartEditingCourse,
  onSaveEditedCourse,
  onRemoveSemester,
  onAddCourse,
  onRemoveCourse,
  setEditingCourseValue, // For course cell editing
}) => {
  const [isOpen, setIsOpen] = useState(true); // Default to open
  const semesterNameInputRef = useRef<HTMLInputElement>(null);
  const courseInputRef = useRef<HTMLInputElement>(null);

  // Focus the input when semester name editing starts
  useEffect(() => {
    if (editingSemesterId === semester.id && semesterNameInputRef.current) {
      semesterNameInputRef.current.focus();
      semesterNameInputRef.current.select(); // Select all text
    }
  }, [editingSemesterId, semester.id]);

  // Focus the input when course cell editing starts
  useEffect(() => {
    if (editing && editing.semesterId === semester.id && courseInputRef.current) {
      courseInputRef.current.focus();
      courseInputRef.current.select();
    }
  }, [editing, semester.id]);


  const handleSemesterNameKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      onSaveEditedSemesterName(event.currentTarget.value);
    } else if (event.key === 'Escape') {
      onSaveEditedSemesterName(undefined); // Cancel editing, revert to original (or simply blur)
    }
  };

  const handleCourseCellKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      onSaveEditedCourse(event.currentTarget.value);
    } else if (event.key === 'Escape') {
       onSaveEditedCourse(undefined); // This would ideally revert to original value before editing started
                                   // For simplicity, current behavior is to save current input or rely on blur.
                                   // To truly revert, you'd need to store the original value when editing starts.
      setEditingCourseValue?.(editing?.value || ''); // Revert to the value in state if Escape is pressed.
                                                    // Or better, call a function that resets `editingCourse` to null.
                                                    // For now, we'll just save.
      (event.target as HTMLInputElement).blur(); // Trigger blur to save
    }
  };
  
  // Helper to check if a specific course cell is being edited
  const isEditingCourseCell = (courseIndex: number, field: "id" | "title" | "grade" | "credits"): boolean => {
    return editing?.semesterId === semester.id &&
           editing?.courseIndex === courseIndex &&
           editing?.field === field;
  };

  return (
    <div className="bg-card border border-border rounded-lg shadow-sm mb-4 p-1 DraggableItem" data-index={index}> {/* Added p-1 for slight inset */}
      {/* Semester Header */}
      <div className="flex items-center justify-between p-3 hover:bg-muted/50 rounded-t-lg cursor-pointer" onClick={() => setIsOpen(!isOpen)}>
        <div className="flex items-center gap-2 flex-grow">
          {editingSemesterId === semester.id ? (
            <Input
              ref={semesterNameInputRef}
              type="text"
              value={editedSemesterName}
              onChange={(e) => setEditedSemesterName?.(e.target.value)} // Ensure setEditedSemesterName is passed and updates state in GradesPage
              onBlur={(e) => onSaveEditedSemesterName(e.target.value)}
              onKeyDown={handleSemesterNameKeyDown}
              className="text-lg font-semibold h-8 px-2 py-1 border-blue-500 ring-1 ring-blue-500 flex-grow" // Style for active editing
              onClick={(e) => e.stopPropagation()} // Prevent toggle when clicking input
            />
          ) : (
            <h4 
              className="text-lg font-semibold px-2 py-1 rounded-md hover:bg-accent flex-grow" // Added hover for visual feedback
              onClick={(e) => {
                e.stopPropagation();
                onStartEditingSemesterName(semester.id, semester.name);
              }}
            >
              {semester.name}
            </h4>
          )}
          {isOpen ? <ChevronDown size={20} /> : <ChevronRight size={20} />}
        </div>
        <div className="flex items-center space-x-2 ml-2">
            <Button variant="ghost" size="icon" onClick={(e) => { e.stopPropagation(); onStartEditingSemesterName(semester.id, semester.name);}} className="text-muted-foreground hover:text-primary">
                <Edit3 size={16} />
            </Button>
            <Button variant="ghost" size="icon" onClick={(e) => { e.stopPropagation(); onRemoveSemester(semester.id);}} className="text-muted-foreground hover:text-destructive">
                <Trash2 size={16} />
            </Button>
        </div>
      </div>

      {/* Courses Table (Collapsible Content) */}
      {isOpen && (
        <div className="p-3 border-t border-border">
          {semester.courses.length > 0 ? (
            <div className="space-y-2">
              {/* Table Header */}
              <div className="grid grid-cols-[1fr,2fr,0.5fr,0.5fr,auto] gap-x-2 text-xs text-muted-foreground font-medium px-2 py-1">
                <div>Course ID</div>
                <div>Title</div>
                <div className="text-center">Grade</div>
                <div className="text-center">Credits</div>
                <div>{/* Actions */}</div>
              </div>
              {/* Course Rows */}
              {semester.courses.map((course, courseIdx) => (
                <div 
                  key={course.id + courseIdx} 
                  className="grid grid-cols-[1fr,2fr,0.5fr,0.5fr,auto] gap-x-2 items-center hover:bg-muted/30 rounded p-2 group"
                >
                  {/* Course ID */}
                  <div className="text-sm">
                    {isEditingCourseCell(courseIdx, 'id') ? (
                      <Input
                        ref={courseInputRef}
                        type="text"
                        value={editing!.value}
                        onChange={(e) => setEditingCourseValue?.(e.target.value)}
                        onBlur={() => onSaveEditedCourse()}
                        onKeyDown={handleCourseCellKeyDown}
                        // --- SMOOTH EDIT STYLING ---
                        className="w-full h-full px-1 py-0.5 text-sm bg-transparent border-blue-500 ring-1 ring-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-sm"
                      />
                    ) : (
                      <span 
                        onClick={() => onStartEditingCourse(semester.id, courseIdx, 'id', String(course.id))}
                        className="block w-full h-full px-1 py-0.5 cursor-text rounded-sm hover:bg-slate-200 dark:hover:bg-slate-700" // Match padding
                      >
                        {course.id || <span className="text-muted-foreground italic">N/A</span>}
                      </span>
                    )}
                  </div>

                  {/* Course Title */}
                  <div className="text-sm">
                    {isEditingCourseCell(courseIdx, 'title') ? (
                      <Input
                        ref={courseInputRef}
                        type="text"
                        value={editing!.value}
                        onChange={(e) => setEditingCourseValue?.(e.target.value)}
                        onBlur={() => onSaveEditedCourse()}
                        onKeyDown={handleCourseCellKeyDown}
                        className="w-full h-full px-1 py-0.5 text-sm bg-transparent border-blue-500 ring-1 ring-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-sm"
                      />
                    ) : (
                      <span 
                        onClick={() => onStartEditingCourse(semester.id, courseIdx, 'title', course.title)}
                        className="block w-full h-full px-1 py-0.5 cursor-text rounded-sm hover:bg-slate-200 dark:hover:bg-slate-700"
                      >
                        {course.title || <span className="text-muted-foreground italic">No Title</span>}
                      </span>
                    )}
                  </div>

                  {/* Grade */}
                  <div className="text-sm text-center">
                    {isEditingCourseCell(courseIdx, 'grade') ? (
                      <Input
                        ref={courseInputRef}
                        type="text"
                        value={editing!.value}
                        onChange={(e) => setEditingCourseValue?.(e.target.value.toUpperCase())}
                        onBlur={() => onSaveEditedCourse()}
                        onKeyDown={handleCourseCellKeyDown}
                        maxLength={2} // A, B+, C- etc.
                        className="w-full h-full px-1 py-0.5 text-sm text-center bg-transparent border-blue-500 ring-1 ring-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-sm"
                      />
                    ) : (
                      <span 
                        onClick={() => onStartEditingCourse(semester.id, courseIdx, 'grade', course.grade)}
                        className="block w-full h-full px-1 py-0.5 cursor-text rounded-sm hover:bg-slate-200 dark:hover:bg-slate-700"
                      >
                        {course.grade || <span className="text-muted-foreground italic">-</span>}
                      </span>
                    )}
                  </div>

                  {/* Credits */}
                  <div className="text-sm text-center">
                    {isEditingCourseCell(courseIdx, 'credits') ? (
                      <Input
                        ref={courseInputRef}
                        type="number" // Use number for credits
                        value={editing!.value}
                        onChange={(e) => setEditingCourseValue?.(e.target.value)}
                        onBlur={() => onSaveEditedCourse()}
                        onKeyDown={handleCourseCellKeyDown}
                        className="w-full h-full px-1 py-0.5 text-sm text-center bg-transparent border-blue-500 ring-1 ring-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-sm [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" // Hide number spinners
                      />
                    ) : (
                      <span 
                        onClick={() => onStartEditingCourse(semester.id, courseIdx, 'credits', String(course.credits))}
                        className="block w-full h-full px-1 py-0.5 cursor-text rounded-sm hover:bg-slate-200 dark:hover:bg-slate-700"
                      >
                        {course.credits}
                      </span>
                    )}
                  </div>
                  
                  {/* Action Button for Course */}
                  <div className="text-right opacity-0 group-hover:opacity-100 transition-opacity">
                    <Button 
                        variant="ghost" 
                        size="icon" 
                        className="text-muted-foreground hover:text-destructive h-7 w-7"
                        onClick={() => onRemoveCourse(semester.id, courseIdx)}
                    >
                        <Trash2 size={14} />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-muted-foreground text-center py-4">No courses added to this semester yet.</p>
          )}
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-4 w-full"
            onClick={() => onAddCourse(semester.id)}
          >
            <PlusCircle size={16} className="mr-2" /> Add Course to {semester.name}
          </Button>
        </div>
      )}
    </div>
  );
};

export default SemesterDropdown;
